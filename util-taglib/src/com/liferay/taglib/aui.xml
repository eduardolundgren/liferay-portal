<?xml version="1.0"?>

<taglibs short-name="aui" uri="http://alloy.liferay.com/tld/aui" tlib-version="1.0">
	<authors>
		<author>Eduardo Lundgren</author>
		<author>Bruno Basto</author>
		<author>Nathan Cavanaugh</author>
		<author>Julio Camarero</author>
		<author>Antonio Junior</author>
	</authors>
	<component name="ButtonItem" module="aui-button-item" bodyContent="false" alloyComponent="true">
		<attributes>
	      <attribute>
	        <name>activeState</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>false</defaultValue>
	        <description><![CDATA[Whether to track the active state of the button.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>boundingBox</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
	of a Widget as well as a containing element for any decorator elements used 
	for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>classNames</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.util.HashMap</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[An object map of the CSS class names to use for the different interaction states.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>contentBox</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
	houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>cssClass</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[CSS class to be automatically added to the <code>boundingBox</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>defaultState</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>true</defaultValue>
	        <description><![CDATA[Whether to apply the default interaction state to the button<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>depth</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Number</outputType>
	        <defaultValue>-1</defaultValue>
	        <description><![CDATA[Number representing the depth of this Widget relative to 
	the root Widget in the object heirarchy.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"-1"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>destroyed</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>false</defaultValue>
	        <description><![CDATA[Flag indicating whether or not this object
	has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>disabled</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>false</defaultValue>
	        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
	is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>focused</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>false</defaultValue>
	        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
	has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>handler</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue>false</defaultValue>
	        <description><![CDATA[An event callback to handle when a user interacts with the button.
	This can either be a function that will be attached on click, or
	an object map that accepts the following keys:
	<code>{fn: // The function to execute
	context: // The context to execute the function in
	type: // The type of event to listen for (defaults to "click")
	}</code><!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>height</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
	the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>hideClass</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue>aui-hide</defaultValue>
	        <description><![CDATA[css class added to hide the <code>boundingBox</code> when
	<a href="Component.html#config_visible">visible</a> is set to
	<code>false</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"aui-hide"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>hoverState</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>true</defaultValue>
	        <description><![CDATA[Whether to track the hover interaction state of the button.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>icon</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[The icon to use inside of the button. Possible values are:<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>iconNode</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[DOM Node to display the icon of the ButtonItem. If not
	specified try to query using HTML_PARSER an element inside
	boundingBox which matches <code>aui-button-icon</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>id</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>index</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Number</outputType>
	        <defaultValue>0</defaultValue>
	        <description><![CDATA[Number representing the Widget's ordinal position in its 
	parent Widget.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>initialized</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>false</defaultValue>
	        <description><![CDATA[Flag indicating whether or not this object
	has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>label</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[Text to use inside of the button.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>labelNode</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[DOM Node to display the text of the ButtonItem. If not
	specified try to query using HTML_PARSER an element inside
	boundingBox which matches <code>aui-button-label</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>parent</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[Retrieves the parent of the Widget in the object hierarchy.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>render</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue>false</defaultValue>
	        <description><![CDATA[If <code>true</code> the render phase will be autimatically invoked
	preventing the <code>.render()</code> manual call.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>rendered</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>false</defaultValue>
	        <description><![CDATA[Flag indicating whether or not this Widget
	has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>root</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[Returns the root Widget in the object hierarchy.  If the
	ROOT_TYPE property is set, the search for the root Widget will be 
	constrained to parent Widgets of the specified type.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>selected</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Number</outputType>
	        <defaultValue>0</defaultValue>
	        <description><![CDATA[Number indicating if the Widget is selected.  Possible 
	values are:
	<dl>
	<dt>0</dt> <dd>(Default) Not selected</dd>
	<dt>1</dt> <dd>Fully selected</dd>
	<dt>2</dt> <dd>Partially selected</dd>
	</dl><!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>srcNode</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>strings</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.util.HashMap</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[Collection of strings used to label elements of the Widget's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>tabIndex</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Number</outputType>
	        <defaultValue>0</defaultValue>
	        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
	position in the default tab flow.  The value is used to set the 
	"tabIndex" attribute on the widget's bounding box.  Negative values allow
	the widget to receive DOM focus programmatically (by calling the focus
	method), while being removed from the default tab flow.  A value of 
	null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>title</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[Text to use as the title attribute of the button.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>type</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue>button</defaultValue>
	        <description><![CDATA[Button type.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"button"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>useARIA</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>true</defaultValue>
	        <description><![CDATA[Boolean indicating if use of the WAI-ARIA Roles and States should be
	enabled for the Widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>visible</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>true</defaultValue>
	        <description><![CDATA[Boolean indicating weather or not the Widget is visible.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>width</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
	the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	    </attributes>
	    <events>
	      <event>
	        <name>activeStateChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'activeState' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>boundingBoxChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>classNamesChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'classNames' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>contentBoxChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>cssClassChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>defaultStateChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'defaultState' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>depthChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'depth' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>destroy</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[<p>
	Lifecycle event for the destroy phase, 
	fired prior to destruction. Invoking the preventDefault 
	method on the event object provided to subscribers will 
	prevent destruction from proceeding.
	</p>
	<p>
	Subscribers to the "after" moment of this event, will be notified
	after destruction is complete (and as a result cannot prevent
	destruction).
	</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>destroyedChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>disabledChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>focusedChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>handlerChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'handler' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>heightChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>hideClassChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>hoverStateChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'hoverState' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>iconChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'icon' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>iconNodeChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'iconNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>idChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>indexChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'index' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>init</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[<p>
	Lifecycle event for the init phase, fired prior to initialization. 
	Invoking the preventDefault() method on the event object provided 
	to subscribers will prevent initialization from occuring.
	</p>
	<p>
	Subscribers to the "after" momemt of this event, will be notified
	after initialization of the object is complete (and therefore
	cannot prevent initialization).
	</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>initializedChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>labelChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>labelNodeChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'labelNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>parentChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'parent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>renderChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>renderedChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>rootChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'root' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>selectedChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'selected' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>srcNodeChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>stringsChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>tabIndexChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>titleChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>typeChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>useARIAChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>visibleChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>widget:contentUpdate</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Notification event, which widget implementations can fire, when
	they change the content of the widget. This event has no default
	behavior and cannot be prevented, so the "on" or "after"
	moments are effectively equivalent (with on listeners being invoked before 
	after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>widget:render</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
	for the widget (prior to invoking the widget's renderer method).
	<p>
	Subscribers to the "on" moment of this event, will be notified 
	before the widget is rendered.
	</p>
	<p>
	Subscribers to the "after" moment of this event, will be notified
	after rendering is complete.
	</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>widthChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
    	</events>
 	</component>
 	<component name="ImageViewer" module="aui-image-viewer" bodyContent="false" alloyComponent="true">
	    <attributes>
	      <attribute>
	        <name>align</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.util.HashMap</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>alignOn</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.util.ArrayList</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[An array of objects corresponding to the nodes and events that will sync the alignment of the widget.
	The implementer can supply an array of objects, with each object having the following properties:
	eventName: (string, required): The eventName to listen to.
	node: (Y.Node, optional): The Y.Node that will fire the event (defaults to the boundingBox of the widget)
	By default, this attribute consists of two objects which will cause the widget to re-align to the node that it is aligned to:
	(1) Scrolling the window, and (2) resizing the window.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>anim</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>true</defaultValue>
	        <description><![CDATA[If <code>true</code> the navigation is animated.<!--{"event":true,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>arrowLeftEl</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[The element to be used as arrow left.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>arrowRightEl</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[The element to be used as arrow right.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>bodyContent</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[The content to be added to the body section. This will replace any existing content
	in the body. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>boundingBox</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[The outermost DOM node for the Widget, used for sizing and positioning 
	of a Widget as well as a containing element for any decorator elements used 
	for skinning.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>caption</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[The caption of the displayed image.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>captionEl</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[The element to be used as caption.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>captionFromTitle</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>true</defaultValue>
	        <description><![CDATA[If <code>true</code> the <a
	href="ImageViewer.html#config_caption">caption</a> will be pulled
	from the title DOM attribute.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>centered</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>true</defaultValue>
	        <description><![CDATA[If <code>true</code> the Overlay with the image will be positioned
	on the center of the viewport.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>closeEl</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[The element to be used as close.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>constrain</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[The node to constrain the widget's bounding box to, when setting xy. Can also be
	set to true, to constrain to the viewport.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>contentBox</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[A DOM node that is a direct descendant of a Widget's bounding box that 
	houses its content.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>cssClass</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[CSS class to be automatically added to the <code>boundingBox</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>currentIndex</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Number</outputType>
	        <defaultValue>0</defaultValue>
	        <description><![CDATA[Index of the current image.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>destroyed</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>false</defaultValue>
	        <description><![CDATA[Flag indicating whether or not this object
	has been through the destroy lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>disabled</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>false</defaultValue>
	        <description><![CDATA[Boolean indicating if the Widget should be disabled. The disabled implementation
	is left to the specific classes extending widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>fillHeight</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[The section (WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER) which should be resized to fill the height of the standard module, when a 
	height is set on the Widget. If a height is not set on the widget, then all sections are sized based on 
	their content.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>focused</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>false</defaultValue>
	        <description><![CDATA[Boolean indicating if the Widget, or one of its descendants, 
	has focus.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>footerContent</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[The content to be added to the footer section. This will replace any existing content
	in the footer. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>headerContent</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[The content to be added to the header section. This will replace any existing content
	in the header. If you want to append, or insert new content, use the <a href="#method_setStdModContent">setStdModContent</a> method.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>height</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[String with units, or number, representing the height of the Widget. If a number is provided,
	the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>hideClass</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue>aui-helper-hidden</defaultValue>
	        <description><![CDATA[css class added to hide the <code>boundingBox</code> when
	<a href="Component.html#config_visible">visible</a> is set to
	<code>false</code>.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"aui-helper-hidden"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>id</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>image</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[Image node element used to load the images.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>imageAnim</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.util.HashMap</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[Configuration attributes passed to the <a href="Anim.html">Anim</a>
	class.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>infoEl</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[The element to be used as info.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>infoTemplate</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue>Image {current} of {total}</defaultValue>
	        <description><![CDATA[String template used to display the information.<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false,"defaultValue":"Image {current} of {total}"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>initialized</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>false</defaultValue>
	        <description><![CDATA[Flag indicating whether or not this object
	has been through the init lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>links</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[Selector or NodeList containing the links where the ImageViewer
	extracts the information to generate the thumbnails.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>loader</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[HTML element to house the <code>img</code> which is being loaded.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>loading</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>false</defaultValue>
	        <description><![CDATA[Whether the image is during a loading state.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>loadingEl</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[The element to be used as loading.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>maxHeight</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Number</outputType>
	        <defaultValue>2147483647</defaultValue>
	        <description><![CDATA[The maximum height of the element<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"2147483647"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>maxWidth</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Number</outputType>
	        <defaultValue>2147483647</defaultValue>
	        <description><![CDATA[The maximum width of the element<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"2147483647"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>modal</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue>{ opacity: .8, background: '#000' }</defaultValue>
	        <description><![CDATA[Displays the modal <a href="OverlayMask.html">OverlayMask</a> on
	the viewport. Set to <code>false</code> to disable.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"{ opacity: .8, background: '#000' }"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>preloadAllImages</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>false</defaultValue>
	        <description><![CDATA[Preload all images grabbed from the <a
	href="ImageViewer.html#config_links">links</a> attribute.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>preventOverlap</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>false</defaultValue>
	        <description><![CDATA[If set to true, and WidgetPositionAlign is also added to the Widget, 
	constrained positioning will attempt to prevent the widget's bounding box from overlapping 
	the element to which it has been aligned, by flipping the orientation of the alignment
	for corner based alignments<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>render</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue>false</defaultValue>
	        <description><![CDATA[If <code>true</code> the render phase will be autimatically invoked
	preventing the <code>.render()</code> manual call.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false,"defaultValue":"false"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>rendered</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>false</defaultValue>
	        <description><![CDATA[Flag indicating whether or not this Widget
	has been through the render lifecycle phase.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>shim</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>false</defaultValue>
	        <description><![CDATA[Boolean flag to indicate whether or not a shim should be added to the Widgets
	boundingBox, to protect it from select box bleedthrough.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"false"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>showArrows</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>true</defaultValue>
	        <description><![CDATA[Show the arrow controls.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>showClose</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>true</defaultValue>
	        <description><![CDATA[Show close icon control.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>srcNode</name>
	        <inputType>java.lang.String</inputType>
	        <outputType>java.lang.String</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition<!--{"event":false,"inputType":"java.lang.String","outputType":"java.lang.String","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>strings</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.util.HashMap</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[Collection of strings used to label elements of the Widget's UI.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.HashMap","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>tabIndex</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Number</outputType>
	        <defaultValue>0</defaultValue>
	        <description><![CDATA[Number (between -32767 to 32767) indicating the widget's 
	position in the default tab flow.  The value is used to set the 
	"tabIndex" attribute on the widget's bounding box.  Negative values allow
	the widget to receive DOM focus programmatically (by calling the focus
	method), while being removed from the default tab flow.  A value of 
	null removes the "tabIndex" attribute from the widget's bounding box.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>totalLinks</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>true</defaultValue>
	        <description><![CDATA[Helper attribute to get the <code>size</code> of the <a
	href="ImageViewer.html#config_links">links</a> NodeList.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>useARIA</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>true</defaultValue>
	        <description><![CDATA[Boolean indicating if use of the WAI-ARIA Roles and States should be
	enabled for the Widget.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>visible</name>
	        <inputType>boolean</inputType>
	        <outputType>boolean</outputType>
	        <defaultValue>true</defaultValue>
	        <description><![CDATA[Boolean indicating weather or not the Widget is visible.<!--{"event":false,"inputType":"boolean","outputType":"boolean","required":false,"defaultValue":"true"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>width</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Object</outputType>
	        <defaultValue></defaultValue>
	        <description><![CDATA[String with units, or number, representing the width of the Widget. If a number is provided,
	the default unit, defined by the Widgets DEF_UNIT, property is used.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>x</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Number</outputType>
	        <defaultValue>0</defaultValue>
	        <description><![CDATA[Page X co-ordinate for the widget. This attribute acts as a facade for the 
	xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>xy</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.util.ArrayList</outputType>
	        <defaultValue>[0,0]</defaultValue>
	        <description><![CDATA[Page XY co-ordinate pair for the widget.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.util.ArrayList","required":false,"defaultValue":"[0,0]"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>y</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Number</outputType>
	        <defaultValue>0</defaultValue>
	        <description><![CDATA[Page Y co-ordinate for the widget. This attribute acts as a facade for the 
	xy attribute. Changes in position can be monitored by listening for xyChange events.<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
	      </attribute>
	      <attribute>
	        <name>zIndex</name>
	        <inputType>java.lang.Object</inputType>
	        <outputType>java.lang.Number</outputType>
	        <defaultValue>0</defaultValue>
	        <description><![CDATA[The z-index to apply to the Widgets boundingBox. Non-numerical values for 
	zIndex will be converted to 0<!--{"event":false,"inputType":"java.lang.Object","outputType":"java.lang.Number","required":false,"defaultValue":"0"}-->]]></description>
	      </attribute>
	    </attributes>
	    <events>
	      <event>
	        <name>alignChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>alignOnChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'alignOn' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>anim</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Handles the anim event. Fired when the image anim ends.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>animChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'anim' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>arrowLeftElChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'arrowLeftEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>arrowRightElChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'arrowRightEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>bodyContentChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'bodyContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>boundingBoxChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>captionChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'caption' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>captionElChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'captionEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>captionFromTitleChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'captionFromTitle' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>centeredChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'centered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>closeElChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'closeEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>constrainChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>contentBoxChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>cssClassChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>currentIndexChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'currentIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>destroy</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[<p>
	Lifecycle event for the destroy phase, 
	fired prior to destruction. Invoking the preventDefault 
	method on the event object provided to subscribers will 
	prevent destruction from proceeding.
	</p>
	<p>
	Subscribers to the "after" moment of this event, will be notified
	after destruction is complete (and as a result cannot prevent
	destruction).
	</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>destroyedChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>disabledChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>fillHeightChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'fillHeight' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>focusedChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>footerContentChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'footerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>headerContentChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'headerContent' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>heightChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>hideClassChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>idChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>imageAnimChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'imageAnim' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>imageChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'image' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>infoElChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'infoEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>infoTemplateChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'infoTemplate' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>init</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[<p>
	Lifecycle event for the init phase, fired prior to initialization. 
	Invoking the preventDefault() method on the event object provided 
	to subscribers will prevent initialization from occuring.
	</p>
	<p>
	Subscribers to the "after" momemt of this event, will be notified
	after initialization of the object is complete (and therefore
	cannot prevent initialization).
	</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>initializedChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>linksChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'links' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>load</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Handles the load event. Fired when a image is laoded.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>loaderChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'loader' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>loadingChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'loading' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>loadingElChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'loadingEl' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>maxHeightChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'maxHeight' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>maxWidthChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'maxWidth' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>modalChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'modal' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>preloadAllImagesChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'preloadAllImages' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>preventOverlapChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'preventOverlap' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>renderChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>renderedChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>request</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Handles the request event. Fired when a image is requested.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>shimChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>showArrowsChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'showArrows' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>showCloseChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'showClose' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>srcNodeChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>stringsChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>tabIndexChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>totalLinksChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'totalLinks' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>useARIAChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>visibleChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>widget:contentUpdate</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Notification event, which widget implementations can fire, when
	they change the content of the widget. This event has no default
	behavior and cannot be prevented, so the "on" or "after"
	moments are effectively equivalent (with on listeners being invoked before 
	after listeners).<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>widget:render</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Lifecycle event for the render phase, fired prior to rendering the UI 
	for the widget (prior to invoking the widget's renderer method).
	<p>
	Subscribers to the "on" moment of this event, will be notified 
	before the widget is rendered.
	</p>
	<p>
	Subscribers to the "after" moment of this event, will be notified
	after rendering is complete.
	</p><!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>widthChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>xChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'x' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>xyChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'xy' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>yChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'y' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	      <event>
	        <name>zIndexChange</name>
	        <type>java.lang.Object</type>
	        <description><![CDATA[Fires when the value for the configuration attribute 'zIndex' is changed. You can listen for the event using the <a href="Attribute.html#method_on">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href="Event.Target.html#method_after">after</a> method if you wish to be notified after the attribute's value has changed.<!--{"event":true,"inputType":"java.lang.Object","outputType":"java.lang.Object","required":false}-->]]></description>
	      </event>
	    </events>
	</component>
</taglibs>