<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%@ include file="/html/portal/layout/view/portlet_js.jspf" %>

<aui:script position="inline">
	Liferay.Util.addInputFocus();

	<%
	String controlPanelCategory = ParamUtil.getString(request, "controlPanelCategory");
	%>

	<c:choose>
		<c:when test="<%= themeDisplay.isStatePopUp() || Validator.isNotNull(controlPanelCategory) %>">
			Liferay.Util.getTop().Liferay.fire(
				'popupReady',
				{
					doc: document,
					win: window,
					windowName: Liferay.Util.getWindowName()
				}
			);
		</c:when>
		<c:otherwise>

			<%
			String scroll = ParamUtil.getString(request, "scroll");
			%>

			<c:if test="<%= Validator.isNotNull(scroll) %>">
				Liferay.on(
					'allPortletsReady',
					function(event) {
						document.getElementById('<%= HtmlUtil.escape(scroll) %>').scrollIntoView();
					}
				);
			</c:if>
		</c:otherwise>
	</c:choose>
</aui:script>

<aui:script use="aui-base">
	Liferay.Util.addInputType();

	Liferay.Portlet.ready(
		function(portletId, node) {
			Liferay.Util.addInputType(node);
		}
	);

	if (A.UA.mobile) {
		Liferay.Util.addInputCancel();
	}
</aui:script>

<%
Group group = null;

LayoutRevision layoutRevision = null;

if (layout != null) {
	group = layout.getGroup();

	layoutRevision = LayoutStagingUtil.getLayoutRevision(layout);
}
%>

<c:if test="<%= !themeDisplay.isStatePopUp() && !group.isControlPanel() && (layout != null) && (!group.hasStagingGroup() || group.isStagingGroup() || layoutTypePortlet.isCustomizable()) && (GroupPermissionUtil.contains(permissionChecker, scopeGroupId, ActionKeys.ADD_LAYOUT) || LayoutPermissionUtil.contains(permissionChecker, layout, ActionKeys.UPDATE) || (layoutTypePortlet.isCustomizable() && LayoutPermissionUtil.contains(permissionChecker, layout, ActionKeys.CUSTOMIZE))) %>">
	<c:if test="<%= layout.isTypePortlet() %>">
		<aui:script>
			Liferay.Data.layoutConfig = {
				container: '#main-content',

				<c:choose>
					<c:when test="<%= !themeDisplay.isFreeformLayout() %>">
						dropNodes: '.portlet-column',
						handles: ['.portlet-title', '.portlet-title-default'],
					</c:when>
					<c:otherwise>
						dropNodes: '.portlet-boundary',
						freeForm: true,
						freeformPlaceholderClass: 'lfr-freeform-layout-drag-indicator',
						handles: ['.portlet-header-bar', '.portlet-title-default', '.portlet-topper'],
					</c:otherwise>
				</c:choose>

				disabledDropContainerClass: 'portlet-dropzone-disabled',
				dragNodes: '.portlet-boundary:not(.portlet-static)',
				dropContainer: '.portlet-dropzone',
				emptyColumnClass: 'empty',
				invalid: '.portlet-static',
				nestedPortletId: '_<%= PortletKeys.NESTED_PORTLETS %>_INSTANCE',
				portletBoundary: '.portlet-boundary'
			};
		</aui:script>

		<aui:script use="liferay-layout">
			<%-- aui:script won't accept a null body --%>
		</aui:script>
	</c:if>

	<aui:script use="event-move,liferay-navigation">
		Liferay.once(
			'initNavigation',
			function() {
				new Liferay.Navigation(
					{
						hasAddLayoutPermission: <%= GroupPermissionUtil.contains(permissionChecker, scopeGroupId, ActionKeys.ADD_LAYOUT) %>,
						layoutIds: [

							<%
							Group scopeGroup = GroupLocalServiceUtil.getGroup(scopeGroupId);

							for (int i = 0; (layouts != null) && (i < layouts.size()); i++) {
								Layout curLayout = (Layout)layouts.get(i);
							%>

								<c:if test="<%= (i > 0) %>">,</c:if>

								{
									deletable: !A.UA.touch && <%= LayoutPermissionUtil.contains(permissionChecker, curLayout, ActionKeys.DELETE) %>,
									id: <%= curLayout.getLayoutId() %>,
									sortable: <%= GroupPermissionUtil.contains(permissionChecker, scopeGroup, ActionKeys.MANAGE_LAYOUTS) && SitesUtil.isLayoutSortable(curLayout) %>,
									updateable: <%= !group.isLayoutPrototype() && LayoutPermissionUtil.contains(permissionChecker, curLayout, ActionKeys.UPDATE) %>
								}

							<%
							}
							%>

							],

						<c:if test="<%= layoutRevision != null %>">
							layoutSetBranchId: '<%= layoutRevision.getLayoutSetBranchId() %>',
						</c:if>

						navBlock: navBlock
					}
				);
			}
		);

		var navBlock = A.one(Liferay.Data.NAV_SELECTOR);

		if (navBlock) {
			navBlock.once(
				['gesturemovestart', 'mousemove'],
				function() {
					Liferay.fire('initNavigation');
				}
			);
		}
	</aui:script>
</c:if>

<aui:script use="liferay-menu,liferay-notice,liferay-poller">
	new Liferay.Menu();

	var liferayNotices = Liferay.Data.notices;

	for (var i = 1; i < liferayNotices.length; i++) {
		new Liferay.Notice(liferayNotices[i]);
	}

	<c:if test="<%= themeDisplay.isSignedIn() %>">
		Liferay.Poller.init(
			{
				encryptedUserId: '<%= Encryptor.encrypt(company.getKeyObj(), String.valueOf(themeDisplay.getUserId())) %>',
				supportsComet: <%= ServerDetector.isSupportsComet() %>
			}
		);
	</c:if>
</aui:script>

<c:if test="<%= PropsValues.JAVASCRIPT_SINGLE_PAGE_APPLICATION_ENABLED %>">
	<aui:script use="aui-surface-app,aui-surface-base,aui-surface-screen-html,liferay-portlet-url">
		A.config.filter = 'debug';
		A.config.useBrowserConsole = true;

		<%-- Surface Utils --%>

		Liferay.Surface = {
			app: null,

			blacklist: {},

			getAllowedPortletIds: function() {
				var instance = this;

				return A.Array.filter(
					Liferay.Portlet.list,
					function(portletId) {
						return instance.isAllowedPortletId(portletId);
					}
				);
			},

			getBasePath: function() {
				var instance = this;

				var layoutRelativeURL = themeDisplay.getLayoutRelativeURL();

				return layoutRelativeURL.substr(0, layoutRelativeURL.lastIndexOf('/'));
			},

			getNamespace: function(portletURL) {
				var instance = this;

				var url = new A.Url(portletURL);

				return Liferay.Util.getPortletNamespace(url.getParameter('p_p_id'));
			},

			getPatternFriendlyURL: function() {
				var instance = this;

				return /\/-\//;
			},

			getPatternPortletURL: function(lifecycle) {
				var instance = this;

				var allowedPortlets = instance.getAllowedPortletIds();

				return new RegExp('p_p_id=(' + allowedPortlets.join('|') + ')&p_p_lifecycle=' + lifecycle);
			},

			getPortletBoundaryId: function(portletId) {
				return 'p_p_id_' + portletId + '_';
			},

			getPortletBoundaryIds: function(portletIds) {
				var instance = this;

				return portletIds.map(
					function(portletId) {
						return instance.getPortletBoundaryId(portletId);
					}
				);
			},

			getRedirect: function(portletURL) {
				var instance = this;

				var url = new A.Url(portletURL);
				var namespace = instance.getNamespace(portletURL);

				return url.getParameter(namespace + 'redirect');
			},

			getSurfaceIds: function() {
				var instance = this;

				var surfaces = instance.getPortletBoundaryIds(instance.getAllowedPortletIds());

				surfaces.push('breadcrumbs');

				return surfaces;
			},

			isActionURL: function(url) {
				var instance = this;

				if (url.indexOf('p_p_lifecycle=1') > -1) {
					return true;
				}

				return false;
			},

			isAllowedPortletId: function(portletId) {
				var instance = this;

				var lastIndexOf = portletId.lastIndexOf('_INSTANCE_');

				if (lastIndexOf > 0) {
					portletId = portletId.substr(0, lastIndexOf);
				}

				return !instance.blacklist[portletId];
			},

			isolatePortletURLRedirect: function(portletURL) {
				var instance = this;

				var url = new A.Url(portletURL);
				var namespace = instance.getNamespace(url.toString());
				var redirect = new A.Url(instance.getRedirect(url.toString()));

				redirect.setParameter('p_p_isolated', true);
				url.setParameter(namespace + 'redirect', redirect.toString());

				return url.toString();
			},

			resetAllPortlets: function() {
				var instance = this;

				A.Array.each(
					instance.getPortletBoundaryIds(Liferay.Portlet.list),
					function(value, index, collection) {
						var portlet = A.one('#' + value);

						if (portlet) {
							portlet.purge(true);
							portlet.portletProcessed = false;
						}
					}
				);

				Liferay.Portlet.readyCounter = 0;
			},

			sendRedirect: function(redirect, title) {
				var instance = this;

				if (redirect) {
					var url = new A.Url(redirect);

					url.removeParameter('p_p_isolated');

					A.config.win.history.replaceState(null, title, url.toString());
				}
			}
		};

		<%-- Surface Screens --%>

		Liferay.Surface.EventScreen = A.Component.create(
			{
				EXTENDS: A.HTMLScreen,

				NAME: 'baseScreen',

				prototype: {
					afterFlip: function() {
						var instance = this;

						Liferay.fire(
							'surfaceScreenAfterFlip',
							{
								app: Liferay.Surface.app,
								screen: instance
							}
						);
					},

					beforeFlip: function() {
						var instance = this;

						Liferay.fire(
							'surfaceScreenBeforeFlip',
							{
								app: Liferay.Surface.app,
								screen: instance
							}
						);
					},

					deactivate: function() {
						var instance = this;

						Liferay.fire(
							'surfaceScreenDeactivate',
							{
								app: Liferay.Surface.app,
								screen: instance
							}
						);
					},

					destructor: function() {
						var instance = this;

						Liferay.fire(
							'surfaceScreenDestructor',
							{
								app: Liferay.Surface.app,
								screen: instance
							}
						);
					}
				}
			}
		);

		Liferay.Surface.ActionURLScreen = A.Component.create(
			{
				ATTRS: {
					cacheable: {
						value: false
					},
					method: {
						value: 'POST'
					}
				},

				EXTENDS: Liferay.Surface.EventScreen,

				NAME: 'actionURLScreen'
			}
		);

		Liferay.Surface.RenderURLScreen = A.Component.create(
			{
				ATTRS: {
					cacheable: {
						value: true
					},
					urlParams: {
						value: {
							p_p_isolated: true
						}
					}
				},

				EXTENDS: Liferay.Surface.EventScreen,

				NAME: 'renderURLScreen'
			}
		);

		<%-- Surface App --%>

		Liferay.Surface.app = new A.SurfaceApp(
			{
				basePath: Liferay.Surface.getBasePath(),
				linkSelector: 'a:not(.portlet-icon-back):not([data-resource-href])',
				on: {
					endNavigate: function(event) {
						var instance = this;

						if (Liferay.Surface.isActionURL(event.path)) {
							var redirect = Liferay.Surface.getRedirect(event.path);

							var title = instance.get('title');

							Liferay.Surface.sendRedirect(redirect, title);
						}

						Liferay.fire(
							'surfaceEndNavigate',
							{
								app: Liferay.Surface.app,
								path: event.path
							}
						);

						A.one('body').removeClass('surface-loading');
					},
					startNavigate: function(event) {
						var instance = this;

						if (Liferay.Surface.isActionURL(event.path)) {
							event.path = Liferay.Surface.isolatePortletURLRedirect(event.path);
						}

						Liferay.fire(
							'surfaceStartNavigate',
							{
								app: Liferay.Surface.app,
								path: event.path
							}
						);

						A.one('body').addClass('surface-loading');
					}
				},
				scrollToTop: false
			}
		);

		<%-- Surface Screen Routes --%>

		Liferay.Surface.app.addScreenRoutes(
			[
				{
					path: function(url) {
						return url.search(Liferay.Surface.getPatternPortletURL(Liferay.PortletURL.ACTION_PHASE)) > -1;
					},
					screen: Liferay.Surface.ActionURLScreen
				},
				{
					path: Liferay.Surface.getPatternFriendlyURL(),
					screen: Liferay.Surface.RenderURLScreen
				},
				{
					path: function(url) {
						return url.search(Liferay.Surface.getPatternPortletURL(Liferay.PortletURL.RENDER_PHASE)) > -1;
					},
					screen: Liferay.Surface.RenderURLScreen
				}
			]
		);

		Liferay.Surface.app.addSurfaces(Liferay.Surface.getSurfaceIds());

		<%-- Surface Extras --%>

		Liferay.on(
			'closePortlet',
			function(event) {
				var portletId = event.portletId;

				var surfaceId = Liferay.Surface.getPortletBoundaryId(portletId);

				delete Liferay.Surface.app.surfaces[surfaceId];
			}
		);

		Liferay.on(
			'portletReady',
			function(event) {
				var portletId = event.portletId;

				var surfaceId = Liferay.Surface.getPortletBoundaryId(portletId);

				if (Liferay.Surface.isAllowedPortletId(portletId) && !Liferay.Surface.app.surfaces[surfaceId]) {
					Liferay.Surface.app.addSurfaces(surfaceId);
				}
			}
		);

		Liferay.on(
			'surfaceStartNavigate',
			function(event) {
				Liferay.Surface.resetAllPortlets();
			}
		);

		<%
		List<Portlet> portletsList = PortletLocalServiceUtil.getPortlets(themeDisplay.getCompanyId());

		for (Portlet portlet : portletsList) {
			if (portlet.isActive() && portlet.isReady() && !portlet.isUndeployedPortlet() && !portlet.isSinglePageApplication()) {
		%>

			Liferay.Surface.blacklist['<%= portlet.getPortletId() %>'] = true;

		<%
			}
		}
		%>

	</aui:script>

	<div class="surface-loading-bar"></div>
</c:if>